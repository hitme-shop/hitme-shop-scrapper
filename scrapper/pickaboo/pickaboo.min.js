const cheerio = require("cheerio"),
   helper = require("../helper/helper"),
   websiteName = "Pickaboo",
   flagHot = "Hot deals",
   flagHome = "Home page",
   flagCategory = "Category";
class PickabooScrapper {
   constructor(t) {
      this.page = t
   }
   getUniqueArrayOfObject(t) {
      return [...new Set(t.map(t => JSON.stringify(t)))].map(t => JSON.parse(t))
   }
   async getMainCategories() {
      return await this.page.$$eval(".em-menu-link", t => t.map(t => ({
         name: t.innerText,
         url: t.href
      })))
   }
   async getSubCategories() {
      let t = cheerio.load(await this.page.content()),
         e = [];
      return t(".menu-item-depth-3").each((a, i) => {
         let r = t(i).find("h5 a span").text(),
            n = t(i).find("h5 a").attr("href");
         e.push({
            name: r,
            url: n
         })
      }), t(".syn-subcategory-list").each((a, i) => {
         let r = e.map(t => t.name);
         r = [...new Set(r)];
         let n = {
            name: t(i).text(),
            url: this.page.url() + t(i).parent().attr("href")
         };
         r.includes(n.name) || e.push(n)
      }), e.filter(t => void 0 !== t.url)
   }
   async getCategories() {
      return await this.page.$$eval(".list-text li", t => t.map(t => ({
         name: t.firstChild.innerText,
         url: t.firstChild.href
      })))
   }
   async getAllCategories() {
      let t = await this.getMainCategories(),
         e = await this.getSubCategories(),
         a = await this.getCategories(),
         i = t.concat(e).concat(a);
      return {
         log: {
            total: i.length,
            mCats: t.length,
            sCats: e.length,
            cats: a.length
         },
         data: i
      }
   }
   async getHomePageProducts() {
      let t = cheerio.load(await this.page.content()),
         e = [];
      return t(".syn-product").each((a, i) => {
         let r = t(i).find(".product-image > img").attr("data-original"),
            n = t(i).find(".syn-product-name > span > a").text().replace(/\r?\n|\r|\t/g, "").split(".").join("").trim(),
            s = t(i).find(".syn-product-name > span > a").attr("href"),
            o = t(i).find(".syn-product-price").text().replace(/\r?\n|\r|\t/g, ""),
            l = o,
            c = 0;
         o = parseInt(o.split("৳")[1].split(",").join(""));
         let p = 1 * (((c = l.split("৳")[2] ? parseInt(l.split("৳")[2].split(",").join("")) : o) - o) / c * 100).toFixed(2),
            g = parseFloat(t(i).find(".mobile-rating > p.amount-mobile").text().split("/")[0].trim()),
            u = parseFloat(t(i).find(".ratings > .amount > a").text().split("(")[1].split(")")[0]);
         e.push({
            title: n,
            src: r,
            url: s,
            rating: g,
            ratingCount: u,
            flag: flagHome,
            sPrice: o,
            oPrice: c,
            discount: p,
            website: websiteName
         })
      }), e
   }
   async getHotDealsProducts(t) {
      let e = cheerio.load(await this.page.content()),
         a = [];
      return e(".syn-view > .product-item").each((t, i) => {
         let r = e(i).find(".syn-product-image > a").attr("href"),
            n = e(i).find(".syn-product-image > a > img").attr("src"),
            s = e(i).find(".syn-product-price").text().replace(/\r?\n|\r|\t/g, ""),
            o = s,
            l = 0;
         s = parseInt(s.split("৳")[1].split(",").join("")), l = o.split("৳")[2] ? parseInt(o.split("৳")[2].split(",").join("")) : s;
         let c = e(i).find(".syn-product-name > a > span").text().split(".").join("").trim(),
            p = parseInt(e(i).find(".mobile-rating > p").text().split("/")[0].trim()),
            g = parseFloat(e(i).find(".ratings > .amount > a").text().split("(")[1].split(")")[0]),
            u = 1 * ((l - s) / l * 100).toFixed(2);
         a.push({
            title: c,
            src: n,
            url: r,
            rating: p,
            ratingCount: g,
            flag: flagHot,
            sPrice: s,
            oPrice: l,
            discount: u,
            website: websiteName
         })
      }), a
   }
   async getCategoryProducts() {
      let t = cheerio.load(await this.page.content()),
         e = [];
      return t(".product-item").each((a, i) => {
         if ("SOLD OUT" !== t(i).find(".out-of-stock span").text()) {
            let a, r, n = t(i).find(".product-name > a").text().trim(),
               s = t(i).find(".product-name > a").attr("href"),
               o = t(i).find(".product-image > img").attr("src"),
               l = parseFloat(t(i).find(".amount-mobile").text().split("/")[0].trim()),
               c = parseInt(t(i).find(".ratings > .amount > a").text().split("(")[1].split(")")[0]),
               p = t(i).find(".special-price > .price");
            "" !== p.text() ? (a = helper.formatTk(p.text()), r = helper.formatTk(t(i).find(".old-price > .price").text())) : a = r = helper.formatTk(t(i).find(".regular-price > .price").text());
            let g = helper.calcDiscount(r, a);
            void 0 !== s && e.push({
               title: n,
               url: s,
               src: o,
               rating: l,
               ratingCount: c,
               sPrice: a,
               oPrice: r,
               discount: g,
               flag: flagCategory,
               website: websiteName
            })
         }
      }), e
   }
   async getAllProducts(t) {
      let e = await this.getHomePageProducts(),
         a = await this.getHotDealsProducts(),
         i = {
            hotDeals: a.length,
            homePage: e.length,
            category: []
         },
         r = [];
      for (let e of t) {
         await this.page.goto(e.url, {
            waitUntil: "networkidle2"
         });
         let t = await this.getCategoryProducts();
         0 !== t.length && (r = r.concat(t), console.log({
            name: e.name,
            product: t.length
         }))
      }
      let n = this.getUniqueArrayOfObject(e.concat(a).concat(r));
      return i.category = r.length, i.total = n.length, {
         log: i,
         data: n
      }
   }
}
module.exports = PickabooScrapper;